<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hunerium AI - Yapay Zeka Destekli Akıllı Çalışma Alanı</title>
    
    <!-- External Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    
    <!-- Firebase -->
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore-compat.js"></script>
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Space+Grotesk:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --gradient-success: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            
            /* Light Theme */
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9ff;
            --bg-tertiary: #ffffff;
            --text-primary: #1a202c;
            --text-secondary: #4a5568;
            --text-muted: #718096;
            --border-color: #e2e8f0;
            --shadow: rgba(0, 0, 0, 0.1);
            --glass-bg: rgba(255, 255, 255, 0.7);
            --glass-border: rgba(255, 255, 255, 0.3);
        }

        [data-theme="dark"] {
            --bg-primary: #1a202c;
            --bg-secondary: #2d3748;
            --bg-tertiary: #2d3748;
            --text-primary: #f7fafc;
            --text-secondary: #e2e8f0;
            --text-muted: #a0aec0;
            --border-color: #4a5568;
            --shadow: rgba(0, 0, 0, 0.3);
            --glass-bg: rgba(45, 55, 72, 0.7);
            --glass-border: rgba(255, 255, 255, 0.1);
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--bg-secondary);
            color: var(--text-primary);
            transition: all 0.3s ease;
        }

        .hidden {
            display: none !important;
        }

        /* Landing Page */
        #landing-page {
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            position: relative;
            overflow: hidden;
        }

        .particles {
            position: absolute;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: rgba(255, 255, 255, 0.5);
            border-radius: 50%;
            animation: float 15s infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0) translateX(0); opacity: 0; }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% { transform: translateY(-100vh) translateX(100px); opacity: 0; }
        }

        .landing-header {
            position: relative;
            z-index: 10;
            padding: 2rem 4rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.8rem;
            font-weight: 700;
            color: white;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .landing-nav {
            display: flex;
            gap: 2rem;
        }

        .landing-nav a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            transition: opacity 0.3s;
        }

        .landing-nav a:hover {
            opacity: 0.8;
        }

        .btn-login {
            background: rgba(255, 255, 255, 0.2);
            padding: 0.75rem 2rem;
            border-radius: 12px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            cursor: pointer;
            transition: all 0.3s;
        }

        .btn-login:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .hero-section {
            position: relative;
            z-index: 10;
            text-align: center;
            padding: 8rem 2rem 4rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .hero-title {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 72px;
            font-weight: 800;
            color: white;
            margin-bottom: 1.5rem;
            animation: fadeInUp 1s ease;
            line-height: 1.2;
        }

        .hero-subtitle {
            font-size: 1.5rem;
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 3rem;
            animation: fadeInUp 1s ease 0.2s backwards;
        }

        .cta-button {
            background: white;
            color: #667eea;
            padding: 1.2rem 3rem;
            border-radius: 16px;
            font-size: 1.2rem;
            font-weight: 600;
            border: none;
            cursor: pointer;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            transition: all 0.3s;
            animation: fadeInUp 1s ease 0.4s backwards;
        }

        .cta-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 50px rgba(0, 0, 0, 0.3);
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .features-section {
            position: relative;
            z-index: 10;
            padding: 4rem 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 3rem;
        }

        .feature-card {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            padding: 2rem;
            transition: all 0.3s;
        }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .feature-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .feature-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: white;
            margin-bottom: 1rem;
        }

        .feature-description {
            color: rgba(255, 255, 255, 0.8);
            line-height: 1.6;
        }

        /* Auth Pages */
        #auth-page {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 2rem;
        }

        .auth-container {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            border-radius: 24px;
            padding: 3rem;
            max-width: 450px;
            width: 100%;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }

        .auth-title {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2rem;
            font-weight: 700;
            color: white;
            text-align: center;
            margin-bottom: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            color: white;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .form-group input {
            width: 100%;
            padding: 1rem;
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
            transition: all 0.3s;
        }

        .form-group input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .form-group input:focus {
            outline: none;
            border-color: white;
            background: rgba(255, 255, 255, 0.15);
        }

        .btn-primary {
            width: 100%;
            padding: 1rem;
            border-radius: 12px;
            border: none;
            background: white;
            color: #667eea;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 1rem;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .btn-google {
            width: 100%;
            padding: 1rem;
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-google:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .auth-switch {
            text-align: center;
            color: white;
            margin-top: 1.5rem;
        }

        .auth-switch a {
            color: white;
            font-weight: 600;
            text-decoration: underline;
            cursor: pointer;
        }

        /* Dashboard */
        #dashboard {
            min-height: 100vh;
        }

        .dashboard-header {
            background: var(--bg-primary);
            border-bottom: 1px solid var(--border-color);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 2px 10px var(--shadow);
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 2rem;
        }

        .dashboard-logo {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.5rem;
            font-weight: 700;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .icon-btn {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            border: none;
            background: var(--bg-secondary);
            color: var(--text-primary);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
            position: relative;
        }

        .icon-btn:hover {
            background: var(--border-color);
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #f56565;
            color: white;
            border-radius: 10px;
            padding: 2px 6px;
            font-size: 0.7rem;
            font-weight: 600;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--gradient-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            cursor: pointer;
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .chat-section {
            background: var(--bg-primary);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px var(--shadow);
        }

        .chat-input-container {
            display: flex;
            gap: 1rem;
            align-items: flex-end;
        }

        .chat-input {
            flex: 1;
            min-height: 60px;
            max-height: 200px;
            padding: 1rem;
            border-radius: 16px;
            border: 2px solid var(--border-color);
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
            resize: vertical;
            transition: all 0.3s;
        }

        .chat-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn-send {
            padding: 1rem 2rem;
            border-radius: 16px;
            border: none;
            background: var(--gradient-primary);
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            white-space: nowrap;
        }

        .btn-send:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }

        .btn-send:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .model-selector {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .model-btn {
            padding: 0.5rem 1rem;
            border-radius: 10px;
            border: 1px solid var(--border-color);
            background: var(--bg-secondary);
            color: var(--text-secondary);
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .model-btn.active {
            background: var(--gradient-primary);
            color: white;
            border-color: transparent;
        }

        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .content-card {
            background: var(--bg-primary);
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px var(--shadow);
            transition: all 0.3s;
            cursor: move;
            position: relative;
        }

        .content-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 30px var(--shadow);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .card-type {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 8px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .card-type.note { background: #e6f7ff; color: #0066cc; }
        .card-type.table { background: #fff7e6; color: #d48806; }
        .card-type.todo { background: #f6ffed; color: #52c41a; }
        .card-type.diagram { background: #fff0f6; color: #eb2f96; }
        .card-type.chart { background: #f9f0ff; color: #722ed1; }
        .card-type.form { background: #e6fffb; color: #13c2c2; }
        .card-type.links { background: #feffe6; color: #faad14; }
        .card-type.swot { background: #fff2e8; color: #fa541c; }

        .card-actions {
            display: flex;
            gap: 0.5rem;
        }

        .card-btn {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            border: none;
            background: var(--bg-secondary);
            color: var(--text-primary);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
            font-size: 1rem;
        }

        .card-btn:hover {
            background: var(--border-color);
        }

        .card-content {
            color: var(--text-primary);
            line-height: 1.6;
        }

        .card-timestamp {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
            font-size: 0.75rem;
            color: var(--text-muted);
        }

        /* Content Type Specific Styles */
        .markdown-content h1, .markdown-content h2, .markdown-content h3 {
            margin: 1rem 0 0.5rem;
            font-weight: 600;
        }

        .markdown-content p {
            margin-bottom: 0.5rem;
        }

        .markdown-content ul, .markdown-content ol {
            margin-left: 1.5rem;
            margin-bottom: 0.5rem;
        }

        .markdown-content code {
            background: var(--bg-secondary);
            padding: 0.2rem 0.4rem;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }

        .markdown-content pre {
            background: var(--bg-secondary);
            padding: 1rem;
            border-radius: 8px;
            overflow-x: auto;
            margin: 0.5rem 0;
        }

        .table-container {
            overflow-x: auto;
        }

        .content-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }

        .content-table th, .content-table td {
            padding: 0.75rem;
            text-align: left;
            border: 1px solid var(--border-color);
        }

        .content-table th {
            background: var(--bg-secondary);
            font-weight: 600;
        }

        .todo-list {
            list-style: none;
        }

        .todo-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: all 0.3s;
        }

        .todo-item:hover {
            background: var(--bg-secondary);
        }

        .todo-checkbox {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .todo-text {
            flex: 1;
        }

        .todo-text.completed {
            text-decoration: line-through;
            color: var(--text-muted);
        }

        .diagram-container {
            margin: 1rem 0;
            background: var(--bg-secondary);
            padding: 1rem;
            border-radius: 8px;
        }

        .chart-container {
            position: relative;
            height: 300px;
            margin: 1rem 0;
        }

        .form-field {
            margin-bottom: 1rem;
        }

        .form-field label {
            display: block;
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .form-field input, .form-field select, .form-field textarea {
            width: 100%;
            padding: 0.75rem;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-family: 'Inter', sans-serif;
        }

        .link-item {
            padding: 1rem;
            border-radius: 8px;
            background: var(--bg-secondary);
            margin-bottom: 0.75rem;
            transition: all 0.3s;
        }

        .link-item:hover {
            background: var(--border-color);
        }

        .link-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .link-url {
            color: #667eea;
            text-decoration: none;
            font-size: 0.875rem;
            word-break: break-all;
        }

        .link-description {
            color: var(--text-muted);
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .swot-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin: 1rem 0;
        }

        .swot-quadrant {
            padding: 1rem;
            border-radius: 8px;
            min-height: 120px;
        }

        .swot-quadrant.strengths {
            background: linear-gradient(135deg, #d4fc79 0%, #96e6a1 100%);
        }

        .swot-quadrant.weaknesses {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        }

        .swot-quadrant.opportunities {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        }

        .swot-quadrant.threats {
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
        }

        .swot-title {
            font-weight: 700;
            margin-bottom: 0.75rem;
            font-size: 1.1rem;
        }

        .swot-content ul {
            list-style: none;
        }

        .swot-content li {
            padding: 0.25rem 0;
            padding-left: 1rem;
            position: relative;
        }

        .swot-content li:before {
            content: "•";
            position: absolute;
            left: 0;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: var(--bg-primary);
            border-radius: 20px;
            padding: 2rem;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 700;
            font-family: 'Space Grotesk', sans-serif;
        }

        .modal-close {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            border: none;
            background: var(--bg-secondary);
            color: var(--text-primary);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
        }

        .modal-body {
            margin-bottom: 1rem;
        }

        /* Notifications */
        .notification-item {
            padding: 1rem;
            border-radius: 12px;
            background: var(--bg-secondary);
            margin-bottom: 1rem;
            border-left: 4px solid #667eea;
            transition: all 0.3s;
            cursor: pointer;
        }

        .notification-item:hover {
            background: var(--border-color);
        }

        .notification-item.unread {
            background: rgba(102, 126, 234, 0.1);
            font-weight: 600;
        }

        .notification-item.info { border-left-color: #3182ce; }
        .notification-item.success { border-left-color: #38a169; }
        .notification-item.warning { border-left-color: #d69e2e; }
        .notification-item.error { border-left-color: #e53e3e; }
        .notification-item.reminder { border-left-color: #805ad5; }

        .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 0.5rem;
        }

        .notification-title {
            font-weight: 600;
        }

        .notification-time {
            font-size: 0.75rem;
            color: var(--text-muted);
        }

        .notification-message {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        /* Reminders */
        .reminder-tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            border-bottom: 2px solid var(--border-color);
        }

        .reminder-tab {
            padding: 0.75rem 1.5rem;
            border: none;
            background: none;
            color: var(--text-secondary);
            font-weight: 500;
            cursor: pointer;
            position: relative;
            transition: all 0.3s;
        }

        .reminder-tab.active {
            color: #667eea;
        }

        .reminder-tab.active:after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            right: 0;
            height: 2px;
            background: #667eea;
        }

        .reminder-item {
            padding: 1rem;
            border-radius: 12px;
            background: var(--bg-secondary);
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .reminder-info {
            flex: 1;
        }

        .reminder-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .reminder-date {
            font-size: 0.875rem;
            color: var(--text-muted);
        }

        .reminder-actions {
            display: flex;
            gap: 0.5rem;
        }

        /* Settings */
        .settings-section {
            margin-bottom: 2rem;
        }

        .settings-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        .setting-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border-radius: 12px;
            background: var(--bg-secondary);
            margin-bottom: 0.75rem;
        }

        .setting-label {
            font-weight: 500;
        }

        .setting-description {
            font-size: 0.875rem;
            color: var(--text-muted);
            margin-top: 0.25rem;
        }

        .setting-control select {
            padding: 0.5rem 1rem;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            background: var(--bg-primary);
            color: var(--text-primary);
            cursor: pointer;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
        }

        .empty-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .empty-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .empty-description {
            color: var(--text-muted);
        }

        /* Loading */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid var(--border-color);
            border-top-color: #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .hero-title {
                font-size: 48px;
            }

            .landing-header {
                padding: 1rem;
            }

            .features-grid {
                grid-template-columns: 1fr;
            }

            .cards-grid {
                grid-template-columns: 1fr;
            }

            .swot-grid {
                grid-template-columns: 1fr;
            }

            .dashboard-header {
                padding: 1rem;
            }

            .chat-input-container {
                flex-direction: column;
            }

            .btn-send {
                width: 100%;
            }
        }

        /* Sortable */
        .sortable-ghost {
            opacity: 0.4;
        }

        .sortable-drag {
            cursor: move;
        }
    </style>
</head>
<body>
    <!-- Landing Page -->
    <div id="landing-page">
        <div class="particles" id="particles"></div>
        
        <div class="landing-header">
            <div class="logo">
                <span>🧠</span>
                <span>Hunerium AI</span>
            </div>
            <div class="landing-nav">
                <a href="#features">Özellikler</a>
                <a href="#" onclick="showAuth('login')">Giriş Yap</a>
                <button class="btn-login" onclick="showAuth('register')">Ücretsiz Başla</button>
            </div>
        </div>

        <div class="hero-section">
            <h1 class="hero-title">Yapay Zeka ile<br>Akıllı Çalışma Alanı</h1>
            <p class="hero-subtitle">Düşüncelerinizi profesyonel içeriklere dönüştürün. AI sekreterin, her zaman yanında.</p>
            <button class="cta-button" onclick="showAuth('register')">Ücretsiz Başla 🚀</button>
        </div>

        <div class="features-section" id="features">
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">📝</div>
                    <h3 class="feature-title">AI Destekli Notlar</h3>
                    <p class="feature-description">Düşüncelerinizi yazın, AI profesyonel içeriğe dönüştürsün. Markdown desteğiyle zengin formatlama.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">📊</div>
                    <h3 class="feature-title">Akıllı Tablolar</h3>
                    <p class="feature-description">Verilerinizi otomatik tablolara çevirin. AI ile sütun ekleme, veri doldurma ve analiz.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">✅</div>
                    <h3 class="feature-title">Görev Yönetimi</h3>
                    <p class="feature-description">AI ile akıllı yapılacaklar listeleri. Görev önerileri ve otomatik organizasyon.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">📈</div>
                    <h3 class="feature-title">Görsel Diyagramlar</h3>
                    <p class="feature-description">Akış şemaları, süreç diyagramları ve grafikler. AI ile otomatik oluşturma.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🔔</div>
                    <h3 class="feature-title">Akıllı Hatırlatıcılar</h3>
                    <p class="feature-description">AI mesajlarınızdan otomatik hatırlatıcı çıkarır. Hiçbir şeyi kaçırmayın.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🌍</div>
                    <h3 class="feature-title">Çoklu Dil Desteği</h3>
                    <p class="feature-description">Türkçe, İngilizce, Almanca, Fransızca ve İspanyolca dillerinde kullanım.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Auth Page -->
    <div id="auth-page" class="hidden">
        <div class="auth-container">
            <h2 class="auth-title" id="auth-title">Giriş Yap</h2>
            
            <div id="login-form">
                <div class="form-group">
                    <label>E-posta</label>
                    <input type="email" id="login-email" placeholder="ornek@email.com">
                </div>
                <div class="form-group">
                    <label>Şifre</label>
                    <input type="password" id="login-password" placeholder="••••••••">
                </div>
                <button class="btn-primary" onclick="login()">Giriş Yap</button>
                <button class="btn-google" onclick="loginWithGoogle()">
                    <span>🔐</span>
                    Google ile Giriş Yap
                </button>
                <div class="auth-switch">
                    Hesabınız yok mu? <a onclick="showAuth('register')">Kayıt Olun</a>
                </div>
            </div>

            <div id="register-form" class="hidden">
                <div class="form-group">
                    <label>Ad Soyad</label>
                    <input type="text" id="register-name" placeholder="Adınız Soyadınız">
                </div>
                <div class="form-group">
                    <label>E-posta</label>
                    <input type="email" id="register-email" placeholder="ornek@email.com">
                </div>
                <div class="form-group">
                    <label>Şifre</label>
                    <input type="password" id="register-password" placeholder="••••••••">
                </div>
                <button class="btn-primary" onclick="register()">Kayıt Ol</button>
                <button class="btn-google" onclick="loginWithGoogle()">
                    <span>🔐</span>
                    Google ile Kayıt Ol
                </button>
                <div class="auth-switch">
                    Zaten hesabınız var mı? <a onclick="showAuth('login')">Giriş Yapın</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Dashboard -->
    <div id="dashboard" class="hidden">
        <div class="dashboard-header">
            <div class="header-left">
                <div class="dashboard-logo">🧠 Hunerium AI</div>
            </div>
            <div class="header-right">
                <button class="icon-btn" onclick="toggleTheme()" title="Tema Değiştir">
                    <span id="theme-icon">🌙</span>
                </button>
                <button class="icon-btn" onclick="openNotifications()" title="Bildirimler">
                    <span>🔔</span>
                    <span class="notification-badge" id="notification-badge">0</span>
                </button>
                <button class="icon-btn" onclick="openReminders()" title="Hatırlatıcılar">
                    <span>⏰</span>
                </button>
                <button class="icon-btn" onclick="openSettings()" title="Ayarlar">
                    <span>⚙️</span>
                </button>
                <div class="user-avatar" onclick="openProfile()" id="user-avatar">U</div>
            </div>
        </div>

        <div class="dashboard-container">
            <div class="chat-section">
                <textarea class="chat-input" id="chat-input" placeholder="Ne yapmak istersiniz? (Örn: 2024 hedeflerim için SWOT analizi yap, haftalık program tablom, toplantı notları)"></textarea>
                <div class="model-selector">
                    <button class="model-btn active" data-model="gpt-4o">Huner 6.0 (En Güçlü)</button>
                    <button class="model-btn" data-model="gpt-4o-mini">Huner 5.5 (Hızlı)</button>
                    <button class="model-btn" data-model="gpt-4-turbo">Huner 5.4 (Turbo)</button>
                    <button class="model-btn" data-model="gpt-4">Huner 5.0 (Klasik)</button>
                    <button class="model-btn" data-model="gpt-3.5-turbo">Huner 4.0 (Ekonomik)</button>
                </div>
                <div class="chat-input-container">
                    <button class="btn-send" onclick="sendMessage()" id="send-btn">
                        <span>Gönder 🚀</span>
                    </button>
                </div>
            </div>

            <div id="cards-container" class="cards-grid"></div>

            <div id="empty-state" class="empty-state">
                <div class="empty-icon">🚀</div>
                <h3 class="empty-title">Hoş Geldiniz!</h3>
                <p class="empty-description">Başlamak için yukarıdaki kutucuğa ne yapmak istediğinizi yazın.<br>AI sizin için otomatik olarak içerik oluşturacak.</p>
            </div>
        </div>
    </div>

    <!-- Notifications Modal -->
    <div id="notifications-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Bildirimler</h3>
                <button class="modal-close" onclick="closeModal('notifications-modal')">×</button>
            </div>
            <div class="modal-body" id="notifications-list">
                <div class="empty-state">
                    <div class="empty-icon">🔔</div>
                    <h3 class="empty-title">Henüz bildirim yok</h3>
                    <p class="empty-description">Yeni bildirimleriniz burada görünecek</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Reminders Modal -->
    <div id="reminders-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Hatırlatıcılar</h3>
                <button class="modal-close" onclick="closeModal('reminders-modal')">×</button>
            </div>
            <div class="reminder-tabs">
                <button class="reminder-tab active" onclick="showReminderTab('upcoming')">Yaklaşan</button>
                <button class="reminder-tab" onclick="showReminderTab('past')">Geçmiş</button>
            </div>
            <div class="modal-body">
                <div id="upcoming-reminders">
                    <div class="empty-state">
                        <div class="empty-icon">⏰</div>
                        <h3 class="empty-title">Yaklaşan hatırlatıcı yok</h3>
                    </div>
                </div>
                <div id="past-reminders" class="hidden">
                    <div class="empty-state">
                        <div class="empty-icon">✅</div>
                        <h3 class="empty-title">Geçmiş hatırlatıcı yok</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Settings Modal -->
    <div id="settings-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Ayarlar</h3>
                <button class="modal-close" onclick="closeModal('settings-modal')">×</button>
            </div>
            <div class="modal-body">
                <div class="settings-section">
                    <h4 class="settings-title">Genel</h4>
                    <div class="setting-item">
                        <div>
                            <div class="setting-label">Dil</div>
                            <div class="setting-description">Arayüz dili</div>
                        </div>
                        <div class="setting-control">
                            <select id="language-select" onchange="changeLanguage(this.value)">
                                <option value="tr">Türkçe</option>
                                <option value="en">English</option>
                                <option value="de">Deutsch</option>
                                <option value="fr">Français</option>
                                <option value="es">Español</option>
                            </select>
                        </div>
                    </div>
                    <div class="setting-item">
                        <div>
                            <div class="setting-label">Tema</div>
                            <div class="setting-description">Görünüm modu</div>
                        </div>
                        <div class="setting-control">
                            <select id="theme-select" onchange="setTheme(this.value)">
                                <option value="light">Açık</option>
                                <option value="dark">Koyu</option>
                                <option value="auto">Otomatik</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="settings-section">
                    <h4 class="settings-title">AI Modeli</h4>
                    <div class="setting-item">
                        <div>
                            <div class="setting-label">Varsayılan Model</div>
                            <div class="setting-description">Kullanılacak AI modeli</div>
                        </div>
                        <div class="setting-control">
                            <select id="default-model-select" onchange="setDefaultModel(this.value)">
                                <option value="gpt-4o">Huner 6.0 (En Güçlü)</option>
                                <option value="gpt-4o-mini">Huner 5.5 (Hızlı)</option>
                                <option value="gpt-4-turbo">Huner 5.4 (Turbo)</option>
                                <option value="gpt-4">Huner 5.0 (Klasik)</option>
                                <option value="gpt-3.5-turbo">Huner 4.0 (Ekonomik)</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="settings-section">
                    <h4 class="settings-title">Hesap</h4>
                    <button class="btn-primary" onclick="logout()" style="background: #e53e3e;">Çıkış Yap</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Profile Modal -->
    <div id="profile-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Profilim</h3>
                <button class="modal-close" onclick="closeModal('profile-modal')">×</button>
            </div>
            <div class="modal-body">
                <div style="text-align: center; margin-bottom: 2rem;">
                    <div class="user-avatar" style="width: 80px; height: 80px; margin: 0 auto; font-size: 2rem;" id="profile-avatar">U</div>
                    <h3 style="margin-top: 1rem;" id="profile-name">Kullanıcı</h3>
                    <p style="color: var(--text-muted);" id="profile-email">email@example.com</p>
                </div>
                <div class="settings-section">
                    <h4 class="settings-title">İstatistikler</h4>
                    <div class="setting-item">
                        <div class="setting-label">Toplam İçerik</div>
                        <div id="stats-total">0</div>
                    </div>
                    <div class="setting-item">
                        <div class="setting-label">Bu Ay Oluşturulan</div>
                        <div id="stats-month">0</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Firebase Configuration
        const firebaseConfig = {
            apiKey: "YOUR_FIREBASE_API_KEY",
            authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
            projectId: "YOUR_PROJECT_ID",
            storageBucket: "YOUR_PROJECT_ID.appspot.com",
            messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
            appId: "YOUR_APP_ID"
        };

        // OpenAI API Key
        const OPENAI_API_KEY = "YOUR_OPENAI_API_KEY";

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const db = firebase.firestore();

        // Global State
        let currentUser = null;
        let currentModel = 'gpt-4o';
        let cards = [];
        let notifications = [];
        let reminders = [];
        let theme = 'light';
        let language = 'tr';

        // Translations
        const translations = {
            tr: {
                greeting: "Hoş Geldiniz!",
                placeholder: "Ne yapmak istersiniz?",
                send: "Gönder 🚀",
                noContent: "Henüz içerik yok",
                notifications: "Bildirimler",
                reminders: "Hatırlatıcılar",
                settings: "Ayarlar",
                profile: "Profilim"
            },
            en: {
                greeting: "Welcome!",
                placeholder: "What would you like to do?",
                send: "Send 🚀",
                noContent: "No content yet",
                notifications: "Notifications",
                reminders: "Reminders",
                settings: "Settings",
                profile: "My Profile"
            }
        };

        // Initialize particles
        function createParticles() {
            const container = document.getElementById('particles');
            for (let i = 0; i < 50; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 15 + 's';
                particle.style.animationDuration = (Math.random() * 10 + 10) + 's';
                container.appendChild(particle);
            }
        }

        // Auth Functions
        function showAuth(type) {
            document.getElementById('landing-page').classList.add('hidden');
            document.getElementById('auth-page').classList.remove('hidden');
            
            if (type === 'login') {
                document.getElementById('auth-title').textContent = 'Giriş Yap';
                document.getElementById('login-form').classList.remove('hidden');
                document.getElementById('register-form').classList.add('hidden');
            } else {
                document.getElementById('auth-title').textContent = 'Kayıt Ol';
                document.getElementById('login-form').classList.add('hidden');
                document.getElementById('register-form').classList.remove('hidden');
            }
        }

        async function login() {
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            
            try {
                await auth.signInWithEmailAndPassword(email, password);
            } catch (error) {
                alert('Giriş hatası: ' + error.message);
            }
        }

        async function register() {
            const name = document.getElementById('register-name').value;
            const email = document.getElementById('register-email').value;
            const password = document.getElementById('register-password').value;
            
            try {
                const result = await auth.createUserWithEmailAndPassword(email, password);
                await result.user.updateProfile({ displayName: name });
                await db.collection('users').doc(result.user.uid).set({
                    name: name,
                    email: email,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                });
            } catch (error) {
                alert('Kayıt hatası: ' + error.message);
            }
        }

        async function loginWithGoogle() {
            try {
                const provider = new firebase.auth.GoogleAuthProvider();
                await auth.signInWithPopup(provider);
            } catch (error) {
                alert('Google giriş hatası: ' + error.message);
            }
        }

        async function logout() {
            await auth.signOut();
        }

        // Auth State Observer
        auth.onAuthStateChanged(async (user) => {
            if (user) {
                currentUser = user;
                showDashboard();
                loadUserData();
            } else {
                currentUser = null;
                document.getElementById('landing-page').classList.remove('hidden');
                document.getElementById('auth-page').classList.add('hidden');
                document.getElementById('dashboard').classList.add('hidden');
            }
        });

        function showDashboard() {
            document.getElementById('landing-page').classList.add('hidden');
            document.getElementById('auth-page').classList.add('hidden');
            document.getElementById('dashboard').classList.remove('hidden');
            
            const name = currentUser.displayName || currentUser.email;
            document.getElementById('user-avatar').textContent = name[0].toUpperCase();
            document.getElementById('profile-avatar').textContent = name[0].toUpperCase();
            document.getElementById('profile-name').textContent = name;
            document.getElementById('profile-email').textContent = currentUser.email;
        }

        // Load user data from Firestore
        async function loadUserData() {
            if (!currentUser) return;
            
            // Load cards
            const cardsSnapshot = await db.collection('cards')
                .where('userId', '==', currentUser.uid)
                .orderBy('order')
                .get();
            
            cards = [];
            cardsSnapshot.forEach(doc => {
                cards.push({ id: doc.id, ...doc.data() });
            });
            
            renderCards();
            
            // Load notifications
            const notificationsSnapshot = await db.collection('notifications')
                .where('userId', '==', currentUser.uid)
                .orderBy('createdAt', 'desc')
                .limit(20)
                .get();
            
            notifications = [];
            notificationsSnapshot.forEach(doc => {
                notifications.push({ id: doc.id, ...doc.data() });
            });
            
            updateNotificationBadge();
            
            // Load reminders
            const remindersSnapshot = await db.collection('reminders')
                .where('userId', '==', currentUser.uid)
                .orderBy('date')
                .get();
            
            reminders = [];
            remindersSnapshot.forEach(doc => {
                reminders.push({ id: doc.id, ...doc.data() });
            });
        }

        // Model Selection
        document.querySelectorAll('.model-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.model-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentModel = btn.dataset.model;
            });
        });

        // Send Message to AI
        async function sendMessage() {
            const input = document.getElementById('chat-input');
            const message = input.value.trim();
            
            if (!message) return;
            
            const sendBtn = document.getElementById('send-btn');
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<span class="spinner"></span>';
            
            try {
                // Call OpenAI API
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${OPENAI_API_KEY}`
                    },
                    body: JSON.stringify({
                        model: currentModel,
                        messages: [
                            {
                                role: 'system',
                                content: `You are Hunerium AI assistant. Analyze the user's request and create structured content. 
                                
Available content types:
- note: For text notes, documentation (use markdown)
- table: For data tables (return markdown table)
- todo: For task lists (return JSON array with {text, completed})
- diagram: For flowcharts/diagrams (return mermaid syntax)
- chart: For data visualization (return JSON with {type, labels, data})
- form: For forms (return JSON array with {type, label, required})
- links: For link collections (return JSON array with {title, url, description})
- swot: For SWOT analysis (return JSON with {strengths, weaknesses, opportunities, threats} as arrays)

Always respond in JSON format:
{
  "type": "content_type",
  "title": "Content Title",
  "content": "content based on type"
}

If user mentions dates/times for reminders, also include:
{
  "reminder": {
    "date": "ISO date string",
    "title": "reminder title"
  }
}`
                            },
                            {
                                role: 'user',
                                content: message
                            }
                        ],
                        temperature: 0.7
                    })
                });
                
                const data = await response.json();
                const aiResponse = data.choices[0].message.content;
                
                // Parse AI response
                let contentData;
                try {
                    contentData = JSON.parse(aiResponse);
                } catch (e) {
                    // If not JSON, treat as note
                    contentData = {
                        type: 'note',
                        title: 'AI Yanıtı',
                        content: aiResponse
                    };
                }
                
                // Create card
                await createCard(contentData);
                
                // Check for reminder
                if (contentData.reminder) {
                    await createReminder(contentData.reminder);
                }
                
                input.value = '';
                
                // Create notification
                await createNotification({
                    type: 'success',
                    title: 'İçerik Oluşturuldu',
                    message: `${contentData.title} başarıyla oluşturuldu`
                });
                
            } catch (error) {
                console.error('AI Error:', error);
                alert('Bir hata oluştu: ' + error.message);
            } finally {
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<span>Gönder 🚀</span>';
            }
        }

        // Create Card
        async function createCard(data) {
            const card = {
                userId: currentUser.uid,
                type: data.type,
                title: data.title,
                content: data.content,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
                order: cards.length
            };
            
            const docRef = await db.collection('cards').add(card);
            cards.push({ id: docRef.id, ...card });
            renderCards();
        }

        // Render Cards
        function renderCards() {
            const container = document.getElementById('cards-container');
            const emptyState = document.getElementById('empty-state');
            
            if (cards.length === 0) {
                container.innerHTML = '';
                emptyState.classList.remove('hidden');
                return;
            }
            
            emptyState.classList.add('hidden');
            container.innerHTML = '';
            
            cards.forEach(card => {
                const cardEl = createCardElement(card);
                container.appendChild(cardEl);
            });
            
            // Initialize drag & drop
            new Sortable(container, {
                animation: 150,
                ghostClass: 'sortable-ghost',
                onEnd: async function(evt) {
                    const item = cards.splice(evt.oldIndex, 1)[0];
                    cards.splice(evt.newIndex, 0, item);
                    
                    // Update order in Firestore
                    const batch = db.batch();
                    cards.forEach((card, index) => {
                        const ref = db.collection('cards').doc(card.id);
                        batch.update(ref, { order: index });
                    });
                    await batch.commit();
                }
            });
        }

        // Create Card Element
        function createCardElement(card) {
            const cardEl = document.createElement('div');
            cardEl.className = 'content-card';
            cardEl.dataset.id = card.id;
            
            const typeIcons = {
                note: '📝',
                table: '📊',
                todo: '✅',
                diagram: '📈',
                chart: '📉',
                form: '📋',
                links: '🔗',
                swot: '🎯'
            };
            
            cardEl.innerHTML = `
                <div class="card-header">
                    <span class="card-type ${card.type}">${typeIcons[card.type] || '📄'} ${card.type}</span>
                    <div class="card-actions">
                        <button class="card-btn" onclick="editCard('${card.id}')" title="Düzenle">✏️</button>
                        <button class="card-btn" onclick="deleteCard('${card.id}')" title="Sil">🗑️</button>
                    </div>
                </div>
                <div class="card-content" id="card-content-${card.id}">
                    ${renderCardContent(card)}
                </div>
                <div class="card-timestamp">
                    ${card.createdAt ? new Date(card.createdAt.toDate()).toLocaleString('tr-TR') : 'Şimdi'}
                </div>
            `;
            
            return cardEl;
        }

        // Render Card Content based on type
        function renderCardContent(card) {
            switch (card.type) {
                case 'note':
                    return `<div class="markdown-content">${marked.parse(card.content)}</div>`;
                
                case 'table':
                    return `<div class="table-container">${marked.parse(card.content)}</div>`;
                
                case 'todo':
                    const todos = typeof card.content === 'string' ? JSON.parse(card.content) : card.content;
                    return `<ul class="todo-list">
                        ${todos.map((todo, i) => `
                            <li class="todo-item">
                                <input type="checkbox" class="todo-checkbox" ${todo.completed ? 'checked' : ''} 
                                    onchange="toggleTodo('${card.id}', ${i})">
                                <span class="todo-text ${todo.completed ? 'completed' : ''}">${todo.text}</span>
                            </li>
                        `).join('')}
                    </ul>`;
                
                case 'diagram':
                    const diagramId = `diagram-${card.id}`;
                    setTimeout(() => {
                        mermaid.initialize({ startOnLoad: true, theme: theme === 'dark' ? 'dark' : 'default' });
                        const element = document.getElementById(diagramId);
                        if (element) {
                            mermaid.render('mermaid-' + card.id, card.content).then(result => {
                                element.innerHTML = result.svg;
                            });
                        }
                    }, 100);
                    return `<div class="diagram-container" id="${diagramId}"></div>`;
                
                case 'chart':
                    const chartId = `chart-${card.id}`;
                    const chartData = typeof card.content === 'string' ? JSON.parse(card.content) : card.content;
                    setTimeout(() => {
                        const canvas = document.getElementById(chartId);
                        if (canvas) {
                            new Chart(canvas, {
                                type: chartData.type || 'bar',
                                data: {
                                    labels: chartData.labels,
                                    datasets: [{
                                        label: card.title,
                                        data: chartData.data,
                                        backgroundColor: [
                                            'rgba(102, 126, 234, 0.8)',
                                            'rgba(118, 75, 162, 0.8)',
                                            'rgba(240, 147, 251, 0.8)',
                                            'rgba(245, 87, 108, 0.8)',
                                            'rgba(79, 172, 254, 0.8)'
                                        ]
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false
                                }
                            });
                        }
                    }, 100);
                    return `<div class="chart-container"><canvas id="${chartId}"></canvas></div>`;
                
                case 'form':
                    const fields = typeof card.content === 'string' ? JSON.parse(card.content) : card.content;
                    return `<form>${fields.map(field => `
                        <div class="form-field">
                            <label>${field.label} ${field.required ? '*' : ''}</label>
                            ${field.type === 'textarea' 
                                ? `<textarea rows="3"></textarea>`
                                : field.type === 'select'
                                ? `<select>
                                    ${(field.options || []).map(opt => `<option>${opt}</option>`).join('')}
                                </select>`
                                : `<input type="${field.type || 'text'}">`
                            }
                        </div>
                    `).join('')}</form>`;
                
                case 'links':
                    const links = typeof card.content === 'string' ? JSON.parse(card.content) : card.content;
                    return links.map(link => `
                        <div class="link-item">
                            <div class="link-title">${link.title}</div>
                            <a href="${link.url}" target="_blank" class="link-url">${link.url}</a>
                            ${link.description ? `<div class="link-description">${link.description}</div>` : ''}
                        </div>
                    `).join('');
                
                case 'swot':
                    const swot = typeof card.content === 'string' ? JSON.parse(card.content) : card.content;
                    return `<div class="swot-grid">
                        <div class="swot-quadrant strengths">
                            <div class="swot-title">💪 Güçlü Yönler</div>
                            <div class="swot-content">
                                <ul>${swot.strengths.map(s => `<li>${s}</li>`).join('')}</ul>
                            </div>
                        </div>
                        <div class="swot-quadrant weaknesses">
                            <div class="swot-title">⚠️ Zayıf Yönler</div>
                            <div class="swot-content">
                                <ul>${swot.weaknesses.map(w => `<li>${w}</li>`).join('')}</ul>
                            </div>
                        </div>
                        <div class="swot-quadrant opportunities">
                            <div class="swot-title">🚀 Fırsatlar</div>
                            <div class="swot-content">
                                <ul>${swot.opportunities.map(o => `<li>${o}</li>`).join('')}</ul>
                            </div>
                        </div>
                        <div class="swot-quadrant threats">
                            <div class="swot-title">⚡ Tehditler</div>
                            <div class="swot-content">
                                <ul>${swot.threats.map(t => `<li>${t}</li>`).join('')}</ul>
                            </div>
                        </div>
                    </div>`;
                
                default:
                    return card.content;
            }
        }

        // Toggle Todo
        async function toggleTodo(cardId, index) {
            const card = cards.find(c => c.id === cardId);
            if (!card) return;
            
            const todos = typeof card.content === 'string' ? JSON.parse(card.content) : card.content;
            todos[index].completed = !todos[index].completed;
            
            await db.collection('cards').doc(cardId).update({
                content: JSON.stringify(todos),
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            
            card.content = JSON.stringify(todos);
            document.getElementById(`card-content-${cardId}`).innerHTML = renderCardContent(card);
        }

        // Delete Card
        async function deleteCard(cardId) {
            if (!confirm('Bu içeriği silmek istediğinize emin misiniz?')) return;
            
            await db.collection('cards').doc(cardId).delete();
            cards = cards.filter(c => c.id !== cardId);
            renderCards();
            
            await createNotification({
                type: 'info',
                title: 'İçerik Silindi',
                message: 'İçerik başarıyla silindi'
            });
        }

        // Edit Card (simplified - opens AI edit prompt)
        async function editCard(cardId) {
            const card = cards.find(c => c.id === cardId);
            if (!card) return;
            
            const instruction = prompt('Bu içeriği nasıl düzenlemek istersiniz?\n(Örn: "Daha detaylı yap", "3 madde daha ekle")');
            if (!instruction) return;
            
            // Call AI to edit
            const sendBtn = document.getElementById('send-btn');
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<span class="spinner"></span>';
            
            try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${OPENAI_API_KEY}`
                    },
                    body: JSON.stringify({
                        model: currentModel,
                        messages: [
                            {
                                role: 'system',
                                content: `Edit the existing content based on user instruction. Return in same format.`
                            },
                            {
                                role: 'user',
                                content: `Current content (${card.type}):\n${JSON.stringify(card.content)}\n\nInstruction: ${instruction}\n\nReturn edited content in same JSON format as original.`
                            }
                        ],
                        temperature: 0.7
                    })
                });
                
                const data = await response.json();
                const newContent = data.choices[0].message.content;
                
                await db.collection('cards').doc(cardId).update({
                    content: newContent,
                    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                });
                
                card.content = newContent;
                document.getElementById(`card-content-${cardId}`).innerHTML = renderCardContent(card);
                
            } catch (error) {
                alert('Düzenleme hatası: ' + error.message);
            } finally {
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<span>Gönder 🚀</span>';
            }
        }

        // Notifications
        async function createNotification(data) {
            const notification = {
                userId: currentUser.uid,
                type: data.type || 'info',
                title: data.title,
                message: data.message,
                read: false,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            const docRef = await db.collection('notifications').add(notification);
            notifications.unshift({ id: docRef.id, ...notification });
            updateNotificationBadge();
        }

        function updateNotificationBadge() {
            const unreadCount = notifications.filter(n => !n.read).length;
            const badge = document.getElementById('notification-badge');
            badge.textContent = unreadCount;
            badge.style.display = unreadCount > 0 ? 'block' : 'none';
        }

        function openNotifications() {
            const modal = document.getElementById('notifications-modal');
            const list = document.getElementById('notifications-list');
            
            if (notifications.length === 0) {
                list.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">🔔</div>
                        <h3 class="empty-title">Henüz bildirim yok</h3>
                    </div>
                `;
            } else {
                list.innerHTML = notifications.map(n => `
                    <div class="notification-item ${n.type} ${n.read ? '' : 'unread'}" onclick="markAsRead('${n.id}')">
                        <div class="notification-header">
                            <div class="notification-title">${n.title}</div>
                            <div class="notification-time">${n.createdAt ? formatTime(n.createdAt.toDate()) : 'Şimdi'}</div>
                        </div>
                        <div class="notification-message">${n.message}</div>
                    </div>
                `).join('');
            }
            
            modal.classList.add('show');
        }

        async function markAsRead(notificationId) {
            await db.collection('notifications').doc(notificationId).update({ read: true });
            const notification = notifications.find(n => n.id === notificationId);
            if (notification) notification.read = true;
            updateNotificationBadge();
        }

        // Reminders
        async function createReminder(data) {
            const reminder = {
                userId: currentUser.uid,
                title: data.title,
                date: firebase.firestore.Timestamp.fromDate(new Date(data.date)),
                completed: false,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            const docRef = await db.collection('reminders').add(reminder);
            reminders.push({ id: docRef.id, ...reminder });
            
            await createNotification({
                type: 'reminder',
                title: 'Hatırlatıcı Oluşturuldu',
                message: `${data.title} için hatırlatıcı ayarlandı`
            });
        }

        function openReminders() {
            const modal = document.getElementById('reminders-modal');
            showReminderTab('upcoming');
            modal.classList.add('show');
        }

        function showReminderTab(tab) {
            document.querySelectorAll('.reminder-tab').forEach(t => t.classList.remove('active'));
            document.querySelector(`.reminder-tab[onclick*="${tab}"]`).classList.add('active');
            
            const now = new Date();
            const upcoming = reminders.filter(r => !r.completed && r.date.toDate() > now);
            const past = reminders.filter(r => r.completed || r.date.toDate() <= now);
            
            if (tab === 'upcoming') {
                document.getElementById('upcoming-reminders').classList.remove('hidden');
                document.getElementById('past-reminders').classList.add('hidden');
                
                const container = document.getElementById('upcoming-reminders');
                if (upcoming.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div class="empty-icon">⏰</div>
                            <h3 class="empty-title">Yaklaşan hatırlatıcı yok</h3>
                        </div>
                    `;
                } else {
                    container.innerHTML = upcoming.map(r => `
                        <div class="reminder-item">
                            <div class="reminder-info">
                                <div class="reminder-title">${r.title}</div>
                                <div class="reminder-date">${formatDate(r.date.toDate())}</div>
                            </div>
                            <div class="reminder-actions">
                                <button class="card-btn" onclick="completeReminder('${r.id}')">✓</button>
                                <button class="card-btn" onclick="deleteReminder('${r.id}')">🗑️</button>
                            </div>
                        </div>
                    `).join('');
                }
            } else {
                document.getElementById('upcoming-reminders').classList.add('hidden');
                document.getElementById('past-reminders').classList.remove('hidden');
                
                const container = document.getElementById('past-reminders');
                if (past.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div class="empty-icon">✅</div>
                            <h3 class="empty-title">Geçmiş hatırlatıcı yok</h3>
                        </div>
                    `;
                } else {
                    container.innerHTML = past.map(r => `
                        <div class="reminder-item" style="opacity: 0.6;">
                            <div class="reminder-info">
                                <div class="reminder-title">${r.title}</div>
                                <div class="reminder-date">${formatDate(r.date.toDate())}</div>
                            </div>
                            <div class="reminder-actions">
                                <button class="card-btn" onclick="deleteReminder('${r.id}')">🗑️</button>
                            </div>
                        </div>
                    `).join('');
                }
            }
        }

        async function completeReminder(reminderId) {
            await db.collection('reminders').doc(reminderId).update({ completed: true });
            const reminder = reminders.find(r => r.id === reminderId);
            if (reminder) reminder.completed = true;
            showReminderTab('upcoming');
        }

        async function deleteReminder(reminderId) {
            await db.collection('reminders').doc(reminderId).delete();
            reminders = reminders.filter(r => r.id !== reminderId);
            showReminderTab(document.querySelector('.reminder-tab.active').textContent.includes('Yaklaşan') ? 'upcoming' : 'past');
        }

        // Settings
        function openSettings() {
            const modal = document.getElementById('settings-modal');
            document.getElementById('language-select').value = language;
            document.getElementById('theme-select').value = theme;
            document.getElementById('default-model-select').value = currentModel;
            modal.classList.add('show');
        }

        function changeLanguage(lang) {
            language = lang;
            localStorage.setItem('language', lang);
            // Update UI with translations (simplified)
        }

        function setTheme(newTheme) {
            theme = newTheme;
            localStorage.setItem('theme', newTheme);
            applyTheme();
        }

        function applyTheme() {
            if (theme === 'auto') {
                const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
                document.getElementById('theme-icon').textContent = isDark ? '☀️' : '🌙';
            } else {
                document.documentElement.setAttribute('data-theme', theme);
                document.getElementById('theme-icon').textContent = theme === 'dark' ? '☀️' : '🌙';
            }
        }

        function toggleTheme() {
            theme = theme === 'light' ? 'dark' : 'light';
            setTheme(theme);
        }

        function setDefaultModel(model) {
            currentModel = model;
            localStorage.setItem('defaultModel', model);
            document.querySelectorAll('.model-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.model === model);
            });
        }

        // Profile
        function openProfile() {
            const modal = document.getElementById('profile-modal');
            
            // Calculate stats
            const totalCards = cards.length;
            const thisMonth = cards.filter(c => {
                if (!c.createdAt) return false;
                const date = c.createdAt.toDate();
                const now = new Date();
                return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();
            }).length;
            
            document.getElementById('stats-total').textContent = totalCards;
            document.getElementById('stats-month').textContent = thisMonth;
            
            modal.classList.add('show');
        }

        // Modal Functions
        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('show');
        }

        // Utility Functions
        function formatTime(date) {
            const now = new Date();
            const diff = now - date;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);
            
            if (minutes < 1) return 'Az önce';
            if (minutes < 60) return `${minutes} dakika önce`;
            if (hours < 24) return `${hours} saat önce`;
            if (days < 7) return `${days} gün önce`;
            return date.toLocaleDateString('tr-TR');
        }

        function formatDate(date) {
            return new Intl.DateTimeFormat('tr-TR', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            }).format(date);
        }

        // Keyboard Shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'Enter') {
                sendMessage();
            }
        });

        // Initialize
        window.addEventListener('load', () => {
            createParticles();
            
            // Load saved settings
            theme = localStorage.getItem('theme') || 'light';
            language = localStorage.getItem('language') || 'tr';
            currentModel = localStorage.getItem('defaultModel') || 'gpt-4o';
            
            applyTheme();
        });

        // Close modals on outside click
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('show');
                }
            });
        });
    </script>
</body>
</html>
