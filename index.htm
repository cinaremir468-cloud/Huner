<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hunerium AI - Akıllı Çalışma Asistanı</title>
    
    <!-- External Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Firebase -->
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore-compat.js"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --bg-primary: #ffffff;
            --bg-secondary: #f9fafb;
            --bg-tertiary: #f3f4f6;
            --bg-hover: #f0f0f0;
            --text-primary: #1f2937;
            --text-secondary: #6b7280;
            --text-tertiary: #9ca3af;
            --border: #e5e7eb;
            --accent: #7c3aed;
            --accent-hover: #6d28d9;
            --accent-light: #ede9fe;
            --success: #10b981;
            --error: #ef4444;
            --warning: #f59e0b;
            --shadow: rgba(0, 0, 0, 0.1);
        }

        [data-theme="dark"] {
            --bg-primary: #1f2937;
            --bg-secondary: #111827;
            --bg-tertiary: #0f172a;
            --bg-hover: #374151;
            --text-primary: #f9fafb;
            --text-secondary: #d1d5db;
            --text-tertiary: #9ca3af;
            --border: #374151;
            --accent: #8b5cf6;
            --accent-hover: #7c3aed;
            --accent-light: #2e1065;
            --shadow: rgba(0, 0, 0, 0.3);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            height: 100vh;
            overflow: hidden;
        }

        .hidden { display: none !important; }

        /* Alert Notification */
        .alert {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            box-shadow: 0 10px 30px var(--shadow);
            z-index: 9999;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            max-width: 400px;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from { transform: translateX(400px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .alert-error {
            background: #fee;
            color: #991b1b;
            border: 1px solid #fca5a5;
        }

        .alert-success {
            background: #d1fae5;
            color: #065f46;
            border: 1px solid #6ee7b7;
        }

        .alert-warning {
            background: #fef3c7;
            color: #92400e;
            border: 1px solid #fcd34d;
        }

        .alert-icon {
            font-size: 1.5rem;
        }

        .alert-close {
            margin-left: auto;
            background: none;
            border: none;
            font-size: 1.25rem;
            cursor: pointer;
            opacity: 0.7;
        }

        .alert-close:hover {
            opacity: 1;
        }

        /* Auth Screen */
        .auth-screen {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 2rem;
        }

        .auth-box {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            padding: 3rem;
            max-width: 420px;
            width: 100%;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }

        .auth-logo {
            text-align: center;
            margin-bottom: 2rem;
        }

        .auth-logo-icon {
            font-size: 3rem;
            margin-bottom: 0.5rem;
        }

        .auth-logo-text {
            font-size: 1.8rem;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .auth-form {
            display: flex;
            flex-direction: column;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: #374151;
        }

        .form-group input {
            width: 100%;
            padding: 0.875rem;
            border-radius: 12px;
            border: 2px solid #e5e7eb;
            font-size: 1rem;
            transition: all 0.3s;
        }

        .form-group input:focus {
            outline: none;
            border-color: #7c3aed;
        }

        .btn-primary {
            width: 100%;
            padding: 1rem;
            border-radius: 12px;
            border: none;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 0.5rem;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
        }

        .btn-google {
            width: 100%;
            padding: 1rem;
            border-radius: 12px;
            border: 2px solid #e5e7eb;
            background: white;
            color: #374151;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-google:hover {
            background: #f9fafb;
        }

        .auth-switch {
            text-align: center;
            margin-top: 1.5rem;
            color: #6b7280;
        }

        .auth-switch a {
            color: #7c3aed;
            font-weight: 600;
            text-decoration: none;
            cursor: pointer;
        }

        /* Main Layout - Diğer stiller öncekiyle aynı, buraya yazmıyorum... */
        .app-container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 280px;
            background: var(--bg-secondary);
            border-right: 1px solid var(--border);
            display: flex;
            flex-direction: column;
            transition: transform 0.3s;
        }

        .sidebar-header {
            padding: 1rem;
            border-bottom: 1px solid var(--border);
        }

        .new-chat-btn {
            width: 100%;
            padding: 0.875rem;
            border-radius: 10px;
            border: 1px solid var(--border);
            background: var(--bg-primary);
            color: var(--text-primary);
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .new-chat-btn:hover {
            background: var(--bg-hover);
        }

        .search-box {
            padding: 1rem;
            border-bottom: 1px solid var(--border);
        }

        .search-input {
            width: 100%;
            padding: 0.75rem;
            border-radius: 8px;
            border: 1px solid var(--border);
            background: var(--bg-primary);
            color: var(--text-primary);
            font-size: 0.875rem;
        }

        .chat-list {
            flex: 1;
            overflow-y: auto;
            padding: 0.5rem;
        }

        .chat-item {
            padding: 0.875rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
            margin-bottom: 0.25rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-item:hover {
            background: var(--bg-hover);
        }

        .chat-item.active {
            background: var(--accent-light);
            color: var(--accent);
        }

        .chat-item-content {
            flex: 1;
            min-width: 0;
        }

        .chat-item-title {
            font-weight: 500;
            font-size: 0.875rem;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .chat-item-date {
            font-size: 0.75rem;
            color: var(--text-tertiary);
            margin-top: 0.125rem;
        }

        .sidebar-footer {
            padding: 1rem;
            border-top: 1px solid var(--border);
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .user-menu:hover {
            background: var(--bg-hover);
        }

        .user-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: var(--accent);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
        }

        .user-info {
            flex: 1;
            min-width: 0;
        }

        .user-name {
            font-weight: 500;
            font-size: 0.875rem;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .user-email {
            font-size: 0.75rem;
            color: var(--text-tertiary);
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: var(--bg-primary);
        }

        .top-bar {
            height: 60px;
            border-bottom: 1px solid var(--border);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 1.5rem;
        }

        .chat-title-container {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .chat-title {
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-primary);
            background: transparent;
            border: none;
            padding: 0.5rem;
            border-radius: 6px;
            transition: all 0.2s;
            max-width: 400px;
        }

        .icon-btn {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            border: none;
            background: transparent;
            color: var(--text-secondary);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            font-size: 1.25rem;
        }

        .icon-btn:hover {
            background: var(--bg-hover);
        }

        .chat-area {
            flex: 1;
            overflow-y: auto;
            padding: 2rem;
            scroll-behavior: smooth;
        }

        .messages-container {
            max-width: 900px;
            margin: 0 auto;
        }

        .message {
            margin-bottom: 1.5rem;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .message-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.875rem;
        }

        .message.user .message-avatar {
            background: var(--accent);
            color: white;
        }

        .message.assistant .message-avatar {
            background: var(--bg-tertiary);
            color: var(--text-primary);
        }

        .message-name {
            font-weight: 600;
            font-size: 0.875rem;
        }

        .message-content {
            margin-left: 40px;
            line-height: 1.6;
        }

        .content-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 1.5rem;
            margin-top: 1rem;
        }

        .card-type-badge {
            display: inline-block;
            padding: 0.375rem 0.75rem;
            border-radius: 6px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            margin-bottom: 1rem;
        }

        .badge-note { background: #dbeafe; color: #1e40af; }
        .badge-table { background: #fef3c7; color: #92400e; }
        .badge-todo { background: #d1fae5; color: #065f46; }
        .badge-diagram { background: #fce7f3; color: #9f1239; }
        .badge-chart { background: #e0e7ff; color: #3730a3; }

        .card-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: var(--text-tertiary);
        }

        .empty-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .empty-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-secondary);
        }

        .input-area {
            border-top: 1px solid var(--border);
            padding: 1.5rem;
            background: var(--bg-primary);
        }

        .input-container {
            max-width: 900px;
            margin: 0 auto;
        }

        .input-wrapper {
            display: flex;
            gap: 1rem;
            align-items: flex-end;
        }

        .input-box {
            flex: 1;
            position: relative;
        }

        .message-input {
            width: 100%;
            min-height: 52px;
            max-height: 200px;
            padding: 0.875rem 3.5rem 0.875rem 1rem;
            border-radius: 12px;
            border: 2px solid var(--border);
            background: var(--bg-primary);
            color: var(--text-primary);
            font-family: inherit;
            font-size: 1rem;
            resize: none;
            transition: all 0.2s;
        }

        .message-input:focus {
            outline: none;
            border-color: var(--accent);
        }

        .input-actions {
            position: absolute;
            right: 0.5rem;
            bottom: 0.5rem;
        }

        .content-type-btn {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            border: none;
            background: transparent;
            color: var(--text-secondary);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
        }

        .content-type-btn:hover {
            background: var(--bg-hover);
        }

        .send-btn {
            width: 52px;
            height: 52px;
            border-radius: 12px;
            border: none;
            background: var(--accent);
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
        }

        .send-btn:hover {
            background: var(--accent-hover);
        }

        .send-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .content-type-picker {
            position: absolute;
            bottom: 110%;
            right: 0;
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 0.5rem;
            box-shadow: 0 10px 30px var(--shadow);
            display: none;
            min-width: 240px;
            z-index: 1000;
        }

        .content-type-picker.show {
            display: block;
        }

        .type-option {
            padding: 0.75rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .type-option:hover {
            background: var(--bg-hover);
        }

        .type-option-icon {
            font-size: 1.5rem;
        }

        .type-option-text {
            flex: 1;
        }

        .type-option-name {
            font-weight: 500;
            font-size: 0.875rem;
        }

        .type-option-desc {
            font-size: 0.75rem;
            color: var(--text-tertiary);
        }

        .loading-dots {
            display: flex;
            gap: 0.5rem;
            margin-left: 40px;
        }

        .loading-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--text-tertiary);
            animation: bounce 1.4s infinite ease-in-out both;
        }

        .loading-dot:nth-child(1) { animation-delay: -0.32s; }
        .loading-dot:nth-child(2) { animation-delay: -0.16s; }

        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1); }
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 2000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: var(--bg-primary);
            border-radius: 16px;
            padding: 2rem;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .modal-close {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            border: none;
            background: var(--bg-secondary);
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 1.25rem;
        }

        .settings-group {
            margin-bottom: 1.5rem;
        }

        .settings-label {
            display: block;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .settings-input,
        .settings-select {
            width: 100%;
            padding: 0.75rem;
            border-radius: 8px;
            border: 1px solid var(--border);
            background: var(--bg-secondary);
            color: var(--text-primary);
        }

        .api-key-hint {
            font-size: 0.75rem;
            color: var(--text-tertiary);
            margin-top: 0.5rem;
        }

        .api-key-hint a {
            color: var(--accent);
        }

        .api-key-status {
            margin-top: 0.5rem;
            padding: 0.5rem;
            border-radius: 6px;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .api-key-status.valid {
            background: #d1fae5;
            color: #065f46;
        }

        .api-key-status.invalid {
            background: #fee;
            color: #991b1b;
        }

        .btn-danger {
            width: 100%;
            padding: 0.875rem;
            border-radius: 8px;
            border: none;
            background: var(--error);
            color: white;
            font-weight: 500;
            cursor: pointer;
        }

        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-thumb {
            background: var(--border);
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <!-- Auth Screen -->
    <div id="auth-screen" class="auth-screen">
        <div class="auth-box">
            <div class="auth-logo">
                <div class="auth-logo-icon">🧠</div>
                <div class="auth-logo-text">Hunerium AI</div>
            </div>
            
            <form id="login-form" class="auth-form" onsubmit="login(event)">
                <div class="form-group">
                    <label>E-posta</label>
                    <input type="email" id="login-email" placeholder="ornek@email.com" required>
                </div>
                <div class="form-group">
                    <label>Şifre</label>
                    <input type="password" id="login-password" placeholder="••••••••" required>
                </div>
                <button type="submit" class="btn-primary">Giriş Yap</button>
                <button type="button" class="btn-google" onclick="loginWithGoogle()">
                    <span>🔐</span> Google ile Giriş
                </button>
                <div class="auth-switch">
                    Hesabınız yok mu? <a onclick="showRegister()">Kayıt Olun</a>
                </div>
            </form>

            <form id="register-form" class="auth-form hidden" onsubmit="register(event)">
                <div class="form-group">
                    <label>Ad Soyad</label>
                    <input type="text" id="register-name" placeholder="Adınız" required>
                </div>
                <div class="form-group">
                    <label>E-posta</label>
                    <input type="email" id="register-email" placeholder="ornek@email.com" required>
                </div>
                <div class="form-group">
                    <label>Şifre</label>
                    <input type="password" id="register-password" placeholder="••••••••" required>
                </div>
                <button type="submit" class="btn-primary">Kayıt Ol</button>
                <button type="button" class="btn-google" onclick="loginWithGoogle()">
                    <span>🔐</span> Google ile Kayıt Ol
                </button>
                <div class="auth-switch">
                    Zaten hesabınız var mı? <a onclick="showLogin()">Giriş Yapın</a>
                </div>
            </form>
        </div>
    </div>

    <!-- Main App -->
    <div id="app" class="app-container hidden">
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <button class="new-chat-btn" onclick="createNewChat()">
                    <span>✨</span> Yeni Sohbet
                </button>
            </div>
            
            <div class="search-box">
                <input type="text" class="search-input" id="search-chats" placeholder="Sohbetlerde ara...">
            </div>
            
            <div class="chat-list" id="chat-list"></div>
            
            <div class="sidebar-footer">
                <div class="user-menu" onclick="openSettings()">
                    <div class="user-avatar" id="sidebar-avatar">U</div>
                    <div class="user-info">
                        <div class="user-name" id="sidebar-name">Kullanıcı</div>
                        <div class="user-email" id="sidebar-email">user@email.com</div>
                    </div>
                    <div style="color: var(--text-tertiary);">⚙️</div>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="top-bar">
                <div class="chat-title-container">
                    <button class="icon-btn" onclick="toggleSidebar()">☰</button>
                    <input type="text" class="chat-title" id="chat-title" value="Yeni Sohbet" onchange="updateChatTitle()">
                </div>
                <div class="top-bar-actions">
                    <button class="icon-btn" onclick="toggleTheme()" title="Tema">
                        <span id="theme-icon">🌙</span>
                    </button>
                </div>
            </div>

            <div class="chat-area" id="chat-area">
                <div class="messages-container" id="messages-container">
                    <div class="empty-state">
                        <div class="empty-icon">🚀</div>
                        <div class="empty-title">Hunerium AI'ya Hoş Geldiniz</div>
                        <div class="empty-subtitle">Başlamak için bir mesaj yazın!</div>
                    </div>
                </div>
            </div>

            <div class="input-area">
                <div class="input-container">
                    <div class="input-wrapper">
                        <div class="input-box">
                            <textarea class="message-input" id="message-input" placeholder="Mesajınızı yazın..." rows="1" oninput="autoResize(this)"></textarea>
                            <div class="input-actions">
                                <button class="content-type-btn" onclick="toggleTypePicker()">
                                    <span id="selected-type-icon">💬</span>
                                </button>
                            </div>
                            <div class="content-type-picker" id="type-picker">
                                <div class="type-option" onclick="selectType(event, 'chat', '💬')">
                                    <div class="type-option-icon">💬</div>
                                    <div class="type-option-text">
                                        <div class="type-option-name">Sohbet</div>
                                        <div class="type-option-desc">Normal sohbet</div>
                                    </div>
                                </div>
                                <div class="type-option" onclick="selectType(event, 'note', '📝')">
                                    <div class="type-option-icon">📝</div>
                                    <div class="type-option-text">
                                        <div class="type-option-name">Not</div>
                                        <div class="type-option-desc">Düz metin notu</div>
                                    </div>
                                </div>
                                <div class="type-option" onclick="selectType(event, 'table', '📊')">
                                    <div class="type-option-icon">📊</div>
                                    <div class="type-option-text">
                                        <div class="type-option-name">Tablo</div>
                                        <div class="type-option-desc">Veri tablosu</div>
                                    </div>
                                </div>
                                <div class="type-option" onclick="selectType(event, 'todo', '✅')">
                                    <div class="type-option-icon">✅</div>
                                    <div class="type-option-text">
                                        <div class="type-option-name">Yapılacaklar</div>
                                        <div class="type-option-desc">Görev listesi</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button class="send-btn" id="send-btn" onclick="sendMessage()">
                            <span>↑</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Settings Modal -->
    <div id="settings-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Ayarlar</div>
                <button class="modal-close" onclick="closeSettings()">×</button>
            </div>
            <div class="settings-group">
                <label class="settings-label">OpenAI API Key</label>
                <input type="password" class="settings-input" id="api-key-input" placeholder="sk-..." oninput="validateApiKey()">
                <div class="api-key-hint">
                    API key'inizi <a href="https://platform.openai.com/api-keys" target="_blank">buradan</a> alabilirsiniz.
                    <br>⚠️ <strong>GÜVENLİK UYARISI:</strong> API key tarayıcıda saklanıyor. Güvenlik için backend kullanmanız önerilir!
                </div>
                <div id="api-key-status" class="api-key-status hidden"></div>
            </div>
            <div class="settings-group">
                <label class="settings-label">AI Model</label>
                <select class="settings-select" id="model-select">
                    <option value="gpt-4o">GPT-4o (En Güçlü)</option>
                    <option value="gpt-4o-mini">GPT-4o Mini (Hızlı)</option>
                    <option value="gpt-4-turbo">GPT-4 Turbo</option>
                    <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                </select>
            </div>
            <div class="settings-group">
                <label class="settings-label">Tema</label>
                <select class="settings-select" id="theme-select" onchange="setTheme(this.value)">
                    <option value="light">Açık</option>
                    <option value="dark">Koyu</option>
                    <option value="auto">Otomatik</option>
                </select>
            </div>
            <div class="settings-group">
                <button class="btn-danger" onclick="logout()">Çıkış Yap</button>
            </div>
        </div>
    </div>

    <script>
        // Firebase Configuration
        const firebaseConfig = {
            apiKey: "AIzaSyDj11iINJdpBIRhfICNCNxlybCZSFfNaxM",
            authDomain: "ainotes-205bd.firebaseapp.com",
            projectId: "ainotes-205bd",
            storageBucket: "ainotes-205bd.firebasestorage.app",
            messagingSenderId: "155065970423",
            appId: "1:155065970423:web:1d90a6bdfac8c10f65adf2"
        };

        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const db = firebase.firestore();

        // Global State
        let currentUser = null;
        let currentChatId = null;
        let currentContentType = 'chat';
        let chats = [];
        let messages = [];
        let theme = 'light';
        let selectedModel = 'gpt-4o-mini';
        let apiKey = '';

        // Initialize Mermaid
        if (typeof mermaid !== 'undefined') {
            mermaid.initialize({ 
                startOnLoad: false,
                theme: 'default',
                securityLevel: 'loose'
            });
        }

        // Alert System
        function showAlert(message, type = 'error') {
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            
            const icons = {
                error: '❌',
                success: '✅',
                warning: '⚠️'
            };
            
            alert.innerHTML = `
                <span class="alert-icon">${icons[type]}</span>
                <div>${message}</div>
                <button class="alert-close" onclick="this.parentElement.remove()">×</button>
            `;
            
            document.body.appendChild(alert);
            
            setTimeout(() => {
                alert.style.animation = 'slideIn 0.3s ease reverse';
                setTimeout(() => alert.remove(), 300);
            }, 5000);
        }

        // API Key Validation
        function validateApiKey() {
            const keyInput = document.getElementById('api-key-input');
            const key = keyInput.value.trim();
            const statusDiv = document.getElementById('api-key-status');
            
            if (!key) {
                statusDiv.classList.add('hidden');
                return false;
            }
            
            // Format kontrolü
            const isValidFormat = /^sk-[a-zA-Z0-9-_]{20,}$/.test(key) || /^sk-proj-[a-zA-Z0-9-_]{20,}$/.test(key);
            
            statusDiv.classList.remove('hidden');
            
            if (isValidFormat) {
                statusDiv.className = 'api-key-status valid';
                statusDiv.innerHTML = '✓ API key formatı geçerli görünüyor';
                return true;
            } else {
                statusDiv.className = 'api-key-status invalid';
                statusDiv.innerHTML = '✗ Geçersiz API key formatı (sk- veya sk-proj- ile başlamalı)';
                return false;
            }
        }

        // Auth Functions
        function showLogin() {
            document.getElementById('login-form').classList.remove('hidden');
            document.getElementById('register-form').classList.add('hidden');
        }

        function showRegister() {
            document.getElementById('login-form').classList.add('hidden');
            document.getElementById('register-form').classList.remove('hidden');
        }

        async function login(e) {
            e.preventDefault();
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            
            try {
                await auth.signInWithEmailAndPassword(email, password);
                showAlert('Başarıyla giriş yapıldı!', 'success');
            } catch (error) {
                showAlert('Giriş hatası: ' + error.message, 'error');
            }
        }

        async function register(e) {
            e.preventDefault();
            const name = document.getElementById('register-name').value;
            const email = document.getElementById('register-email').value;
            const password = document.getElementById('register-password').value;
            
            try {
                const result = await auth.createUserWithEmailAndPassword(email, password);
                await result.user.updateProfile({ displayName: name });
                
                await db.collection('users').doc(result.user.uid).set({
                    name: name,
                    email: email,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                });
                
                showAlert('Kayıt başarılı!', 'success');
            } catch (error) {
                showAlert('Kayıt hatası: ' + error.message, 'error');
            }
        }

        async function loginWithGoogle() {
            try {
                const provider = new firebase.auth.GoogleAuthProvider();
                await auth.signInWithPopup(provider);
                showAlert('Google ile giriş başarılı!', 'success');
            } catch (error) {
                showAlert('Google giriş hatası: ' + error.message, 'error');
            }
        }

        async function logout() {
            await auth.signOut();
            closeSettings();
        }

        // Auth State Observer
        auth.onAuthStateChanged(async (user) => {
            if (user) {
                currentUser = user;
                showApp();
                await loadUserData();
            } else {
                currentUser = null;
                showAuthScreen();
            }
        });

        function showAuthScreen() {
            document.getElementById('auth-screen').classList.remove('hidden');
            document.getElementById('app').classList.add('hidden');
        }

        function showApp() {
            document.getElementById('auth-screen').classList.add('hidden');
            document.getElementById('app').classList.remove('hidden');
            
            const name = currentUser.displayName || currentUser.email;
            const email = currentUser.email;
            
            document.getElementById('sidebar-avatar').textContent = name[0].toUpperCase();
            document.getElementById('sidebar-name').textContent = name;
            document.getElementById('sidebar-email').textContent = email;
        }

        // Load User Data
        async function loadUserData() {
            if (!currentUser) return;
            
            // Load API Key
            apiKey = localStorage.getItem('openai_api_key') || '';
            
            // Validate saved API key
            if (apiKey && !(/^sk-[a-zA-Z0-9-_]{20,}$/.test(apiKey) || /^sk-proj-[a-zA-Z0-9-_]{20,}$/.test(apiKey))) {
                showAlert('Kaydedilen API key formatı geçersiz. Lütfen yeni bir key girin!', 'warning');
                apiKey = '';
                localStorage.removeItem('openai_api_key');
            }
            
            // Load chats
            const chatsSnapshot = await db.collection('chats')
                .where('userId', '==', currentUser.uid)
                .get();
            
            chats = [];
            chatsSnapshot.forEach(doc => {
                chats.push({ id: doc.id, ...doc.data() });
            });
            
            chats.sort((a, b) => {
                const timeA = a.updatedAt ? a.updatedAt.toMillis() : 0;
                const timeB = b.updatedAt ? b.updatedAt.toMillis() : 0;
                return timeB - timeA;
            });
            
            renderChatList();
            
            if (chats.length > 0) {
                loadChat(chats[0].id);
            } else {
                await createNewChat();
            }
            
            // Load settings
            theme = localStorage.getItem('theme') || 'light';
            selectedModel = localStorage.getItem('model') || 'gpt-4o-mini';
            applyTheme();
            document.getElementById('model-select').value = selectedModel;
            
            // Check API key on load
            if (!apiKey) {
                showAlert('API key bulunamadı! Lütfen ayarlardan ekleyin.', 'warning');
            }
        }

        // Chat Functions
        async function createNewChat() {
            const chatData = {
                userId: currentUser.uid,
                title: 'Yeni Sohbet',
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            const docRef = await db.collection('chats').add(chatData);
            const newChat = { id: docRef.id, ...chatData, createdAt: new Date(), updatedAt: new Date() };
            chats.unshift(newChat);
            
            renderChatList();
            loadChat(docRef.id);
        }

        async function loadChat(chatId) {
            currentChatId = chatId;
            
            document.querySelectorAll('.chat-item').forEach(item => {
                item.classList.toggle('active', item.dataset.chatId === chatId);
            });
            
            const messagesSnapshot = await db.collection('chats')
                .doc(chatId)
                .collection('messages')
                .orderBy('createdAt', 'asc')
                .get();
            
            messages = [];
            messagesSnapshot.forEach(doc => {
                messages.push({ id: doc.id, ...doc.data() });
            });
            
            const chat = chats.find(c => c.id === chatId);
            if (chat) {
                document.getElementById('chat-title').value = chat.title;
            }
            
            renderMessages();
        }

        function renderChatList() {
            const container = document.getElementById('chat-list');
            
            if (chats.length === 0) {
                container.innerHTML = '<div class="empty-state" style="padding: 2rem 1rem;"><div class="empty-subtitle">Henüz sohbet yok</div></div>';
                return;
            }
            
            container.innerHTML = chats.map(chat => {
                const date = chat.updatedAt ? formatRelativeTime(chat.updatedAt.toDate ? chat.updatedAt.toDate() : new Date()) : 'Şimdi';
                return `
                    <div class="chat-item ${chat.id === currentChatId ? 'active' : ''}" data-chat-id="${chat.id}" onclick="loadChat('${chat.id}')">
                        <div class="chat-item-content">
                            <div class="chat-item-title">${escapeHtml(chat.title)}</div>
                            <div class="chat-item-date">${date}</div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        async function updateChatTitle() {
            const newTitle = document.getElementById('chat-title').value.trim();
            if (!newTitle || !currentChatId) return;
            
            await db.collection('chats').doc(currentChatId).update({
                title: newTitle,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            
            const chat = chats.find(c => c.id === currentChatId);
            if (chat) {
                chat.title = newTitle;
                renderChatList();
            }
        }

        // Message Functions
        function renderMessages() {
            const container = document.getElementById('messages-container');
            
            if (messages.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">🚀</div>
                        <div class="empty-title">Sohbete Başlayın</div>
                        <div class="empty-subtitle">Bir mesaj yazın!</div>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = messages.map(msg => renderMessage(msg)).join('');
            scrollToBottom();
        }

        function renderMessage(msg) {
            const isUser = msg.role === 'user';
            const avatar = isUser ? (currentUser.displayName || 'U')[0].toUpperCase() : 'AI';
            const name = isUser ? (currentUser.displayName || 'Siz') : 'Hunerium AI';
            
            let contentHtml = '';
            
            if (msg.contentType && msg.contentType !== 'chat') {
                contentHtml = `<div class="content-card">${renderContent(msg)}</div>`;
            } else {
                contentHtml = `<div>${escapeHtml(msg.content || '').replace(/\n/g, '<br>')}</div>`;
            }
            
            return `
                <div class="message ${msg.role}">
                    <div class="message-header">
                        <div class="message-avatar">${avatar}</div>
                        <div class="message-name">${name}</div>
                    </div>
                    <div class="message-content">${contentHtml}</div>
                </div>
            `;
        }

        function renderContent(msg) {
            const typeIcons = { note: '📝', table: '📊', todo: '✅', diagram: '📈', chart: '📉' };
            const typeName = { note: 'Not', table: 'Tablo', todo: 'Yapılacaklar', diagram: 'Diyagram', chart: 'Grafik' };
            
            let html = `<span class="card-type-badge badge-${msg.contentType}">${typeIcons[msg.contentType]} ${typeName[msg.contentType]}</span>`;
            
            if (msg.title) {
                html += `<div class="card-title">${escapeHtml(msg.title)}</div>`;
            }
            
            html += '<div class="card-content">';
            
            try {
                switch (msg.contentType) {
                    case 'note':
                        if (typeof marked !== 'undefined') {
                            html += `<div class="markdown-content">${marked.parse(msg.content)}</div>`;
                        } else {
                            html += `<div>${escapeHtml(msg.content).replace(/\n/g, '<br>')}</div>`;
                        }
                        break;
                    
                    default:
                        html += `<div>${escapeHtml(msg.content || '').replace(/\n/g, '<br>')}</div>`;
                }
            } catch (error) {
                console.error('Content render error:', error);
                html += `<pre>${escapeHtml(String(msg.content || ''))}</pre>`;
            }
            
            html += '</div>';
            return html;
        }

        // Send Message
        async function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            
            if (!message || !currentChatId) return;
            
            // API key kontrolü
            if (!apiKey) {
                showAlert('API key bulunamadı! Lütfen ayarlardan ekleyin.', 'error');
                openSettings();
                return;
            }
            
            // API key format kontrolü
            if (!(/^sk-[a-zA-Z0-9-_]{20,}$/.test(apiKey) || /^sk-proj-[a-zA-Z0-9-_]{20,}$/.test(apiKey))) {
                showAlert('API key formatı geçersiz! Lütfen doğru formatta bir key girin.', 'error');
                openSettings();
                return;
            }
            
            const sendBtn = document.getElementById('send-btn');
            sendBtn.disabled = true;
            
            // Add user message
            const userMessage = {
                role: 'user',
                content: message,
                contentType: currentContentType !== 'chat' ? currentContentType : null,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            await db.collection('chats').doc(currentChatId).collection('messages').add(userMessage);
            messages.push({ ...userMessage, id: Date.now().toString(), createdAt: new Date() });
            
            input.value = '';
            input.style.height = 'auto';
            renderMessages();
            
            // Show loading
            showLoadingMessage();
            
            try {
                // Call OpenAI
                const response = await callOpenAI(message, currentContentType);
                
                if (response) {
                    // Add AI response
                    const aiMessage = {
                        role: 'assistant',
                        content: response.content,
                        contentType: response.type,
                        title: response.title,
                        createdAt: firebase.firestore.FieldValue.serverTimestamp()
                    };
                    
                    await db.collection('chats').doc(currentChatId).collection('messages').add(aiMessage);
                    messages.push({ ...aiMessage, id: (Date.now() + 1).toString(), createdAt: new Date() });
                    
                    // Auto-generate title if first message
                    if (messages.length === 2) {
                        await generateChatTitle(message);
                    }
                    
                    // Update chat timestamp
                    await db.collection('chats').doc(currentChatId).update({
                        updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                    });
                }
            } catch (error) {
                console.error('Send error:', error);
                
                // Hata mesajını kullanıcı dostu yap
                let errorMsg = 'Bir hata oluştu!';
                
                if (error.message.includes('Incorrect API key')) {
                    errorMsg = 'API key hatalı veya geçersiz! Lütfen kontrol edin.';
                    apiKey = ''; // Temizle
                    localStorage.removeItem('openai_api_key');
                } else if (error.message.includes('rate_limit')) {
                    errorMsg = 'İstek limitine ulaşıldı. Lütfen biraz bekleyin.';
                } else if (error.message.includes('insufficient_quota')) {
                    errorMsg = 'OpenAI hesabınızda kredi kalmamış. Lütfen hesabınızı kontrol edin.';
                } else {
                    errorMsg = error.message;
                }
                
                showAlert(errorMsg, 'error');
            } finally {
                hideLoadingMessage();
                renderMessages();
                sendBtn.disabled = false;
                
                // Reset to chat type
                selectType(null, 'chat', '💬');
            }
        }

        async function callOpenAI(message, contentType) {
            let systemPrompt = 'Sen yardımcı bir AI asistanısın. Kullanıcının sorularını detaylı ve açık bir şekilde yanıtla.';
            
            if (contentType !== 'chat') {
                systemPrompt = `Sen Hunerium AI asistanısın. Kullanıcı "${contentType}" tipi içerik istedi. `;
                
                switch (contentType) {
                    case 'note':
                        systemPrompt += `Markdown formatında düzenli ve profesyonel bir not oluştur. JSON formatında yanıt ver: {"type": "note", "title": "Başlık", "content": "markdown içerik"}`;
                        break;
                    case 'table':
                        systemPrompt += `Markdown tablo formatında veri tablosu oluştur. JSON formatında yanıt ver: {"type": "table", "title": "Başlık", "content": "markdown tablo"}`;
                        break;
                    case 'todo':
                        systemPrompt += `Yapılacaklar listesi oluştur. JSON formatında yanıt ver: {"type": "todo", "title": "Başlık", "content": [{"text": "görev", "completed": false}]}`;
                        break;
                }
            }
            
            try {
                const apiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: selectedModel,
                        messages: [
                            { role: 'system', content: systemPrompt },
                            { role: 'user', content: message }
                        ],
                        temperature: 0.7,
                        max_tokens: 2000
                    })
                });
                
                if (!apiResponse.ok) {
                    const error = await apiResponse.json();
                    throw new Error(error.error?.message || 'OpenAI API hatası');
                }
                
                const data = await apiResponse.json();
                const aiResponse = data.choices[0].message.content;
                
                if (contentType === 'chat') {
                    return { type: null, content: aiResponse };
                }
                
                try {
                    const parsed = JSON.parse(aiResponse);
                    return parsed;
                } catch (e) {
                    return { type: contentType, title: 'Yanıt', content: aiResponse };
                }
            } catch (error) {
                console.error('OpenAI API Error:', error);
                throw error;
            }
        }

        async function generateChatTitle(firstMessage) {
            try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: 'gpt-3.5-turbo',
                        messages: [
                            { role: 'system', content: 'Verilen mesajdan 3-5 kelimelik kısa ve açıklayıcı bir başlık oluştur. Sadece başlığı yaz, başka bir şey ekleme.' },
                            { role: 'user', content: firstMessage }
                        ],
                        temperature: 0.7,
                        max_tokens: 20
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    const title = data.choices[0].message.content.trim();
                    
                    await db.collection('chats').doc(currentChatId).update({ title });
                    
                    const chat = chats.find(c => c.id === currentChatId);
                    if (chat) {
                        chat.title = title;
                        document.getElementById('chat-title').value = title;
                        renderChatList();
                    }
                }
            } catch (error) {
                console.error('Title generation error:', error);
            }
        }

        function showLoadingMessage() {
            const container = document.getElementById('messages-container');
            container.insertAdjacentHTML('beforeend', `
                <div class="message assistant loading-message">
                    <div class="message-header">
                        <div class="message-avatar">AI</div>
                        <div class="message-name">Hunerium AI</div>
                    </div>
                    <div class="loading-dots">
                        <div class="loading-dot"></div>
                        <div class="loading-dot"></div>
                        <div class="loading-dot"></div>
                    </div>
                </div>
            `);
            scrollToBottom();
        }

        function hideLoadingMessage() {
            const loading = document.querySelector('.loading-message');
            if (loading) loading.remove();
        }

        // Content Type Picker
        function toggleTypePicker() {
            const picker = document.getElementById('type-picker');
            picker.classList.toggle('show');
        }

        function selectType(event, type, icon) {
            currentContentType = type;
            document.getElementById('selected-type-icon').textContent = icon;
            document.getElementById('type-picker').classList.remove('show');
        }

        // UI Functions
        function toggleSidebar() {
            document.getElementById('sidebar').classList.toggle('show');
        }

        function scrollToBottom() {
            const chatArea = document.getElementById('chat-area');
            chatArea.scrollTop = chatArea.scrollHeight;
        }

        function autoResize(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 200) + 'px';
        }

        function toggleTheme() {
            theme = theme === 'light' ? 'dark' : 'light';
            setTheme(theme);
        }

        function setTheme(newTheme) {
            theme = newTheme;
            localStorage.setItem('theme', theme);
            applyTheme();
        }

        function applyTheme() {
            if (theme === 'auto') {
                const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
                document.getElementById('theme-icon').textContent = isDark ? '☀️' : '🌙';
            } else {
                document.documentElement.setAttribute('data-theme', theme);
                document.getElementById('theme-icon').textContent = theme === 'dark' ? '☀️' : '🌙';
            }
        }

        function openSettings() {
            document.getElementById('settings-modal').classList.add('show');
            document.getElementById('theme-select').value = theme;
            document.getElementById('model-select').value = selectedModel;
            document.getElementById('api-key-input').value = apiKey;
            validateApiKey();
        }

        function closeSettings() {
            const newApiKey = document.getElementById('api-key-input').value.trim();
            
            if (newApiKey && validateApiKey()) {
                apiKey = newApiKey;
                localStorage.setItem('openai_api_key', apiKey);
                showAlert('API key kaydedildi!', 'success');
            }
            
            selectedModel = document.getElementById('model-select').value;
            localStorage.setItem('model', selectedModel);
            
            document.getElementById('settings-modal').classList.remove('show');
        }

        // Utility Functions
        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function formatRelativeTime(date) {
            const now = new Date();
            const diff = now - date;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);
            
            if (minutes < 1) return 'Şimdi';
            if (minutes < 60) return `${minutes}dk`;
            if (hours < 24) return `${hours}sa`;
            if (days < 7) return `${days}g`;
            return date.toLocaleDateString('tr-TR', { month: 'short', day: 'numeric' });
        }

        // Keyboard Shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey && document.activeElement === document.getElementById('message-input')) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Close modal on outside click
        document.addEventListener('click', (e) => {
            if (e.target.id === 'settings-modal') {
                closeSettings();
            }
        });

        // Initialize
        window.addEventListener('load', () => {
            theme = localStorage.getItem('theme') || 'light';
            selectedModel = localStorage.getItem('model') || 'gpt-4o-mini';
            apiKey = localStorage.getItem('openai_api_key') || '';
            applyTheme();
        });
    </script>
</body>
</html>
